stages:
    - build
    - deploy
    - teardown

#############################################
# 1) Build your usual frontend-image
#############################################
build:
    image: docker:20
    stage: build
    before_script:
        - docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    script:
        - |
            # Sätt DOCKER_TAG till "latest" om main, annars branch-namnet
            if [[ $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH ]]; then
              DOCKER_TAG="latest"
            else
              DOCKER_TAG="$CI_COMMIT_REF_NAME"
            fi

            echo "Building $CI_REGISTRY_IMAGE:$DOCKER_TAG"

            # Bygger och pushar bilden (inget --target, eftersom Next.js-frontend redan är i Dockerfile)
            docker buildx build \
              --cache-from="$CI_REGISTRY_IMAGE:latest" \
              -t "$CI_REGISTRY_IMAGE:$DOCKER_TAG" \
              --push \
              .
    rules:
        - if: $CI_MERGE_REQUEST_ID
          changes:
              - Dockerfile
              - package.json
              - package-lock.json
              - tsconfig.json
              - src/**/*.ts
              - src/**/*.tsx
              - public/**/*.svg
              - docker-compose.yml
              - .gitlab-ci.yml
        - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
          changes:
              - Dockerfile
              - package.json
              - package-lock.json
              - tsconfig.json
              - src/**/*.ts
              - src/**/*.tsx
              - public/**/*.svg
              - docker-compose.yml
              - .gitlab-ci.yml

#############################################
# 2) Build "utils"-image
#############################################
build-utils:
    image: docker:20
    stage: build
    before_script:
        - docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    script:
        - |
            echo "Building $CI_REGISTRY_IMAGE/utils:latest"
            docker buildx build \
              --cache-from="$CI_REGISTRY_IMAGE/utils:latest" \
              -t "$CI_REGISTRY_IMAGE/utils:latest" \
              --push \
              -f Dockerfile-utils \
              .
    rules:
        - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
          changes:
              - Dockerfile-utils

#############################################
# 3) Deploy-job for Merge Requests (review)
#############################################
deploy_review:
    stage: deploy
    image: "$CI_REGISTRY_IMAGE/utils:latest"

    environment:
        name: "review-$CI_COMMIT_REF_NAME"
        url: "https://review-$CI_COMMIT_REF_NAME.cc25.chasacademy.dev"
        on_stop: stop_review

    rules:
        - if: $CI_MERGE_REQUEST_ID

    script:
        - |
            set -euo pipefail

            echo "Loggar in i Portainer..."
            export PORTAINER_TOKEN=$(curl -s -X POST "https://portainer.cc25.chasacademy.dev/api/auth" \
              --json '{"username": "'$PORTAINER_USER'", "password": "'$PORTAINER_PASSWORD'"}' \
              | jq -r '.jwt')

            echo "Bygger stack-namn..."
            export STACK_NAME="$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME"
            export NORMALIZED_STACK_NAME=$(echo "$STACK_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]_-')
            export SERVICE_NAME="frontend"
            export FULL_SERVICE_NAME="${NORMALIZED_STACK_NAME}_${SERVICE_NAME}"

            # Kontrollera fullständigt namn (stack + service)
            if [ ${#FULL_SERVICE_NAME} -gt 63 ]; then
              echo "ERROR: Tjänstnamn '$FULL_SERVICE_NAME' är ${#FULL_SERVICE_NAME} tecken långt. Max är 63."
              exit 1
            fi

            export CI_ENVIRONMENT_SLUG="review-$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')"
            export DOCKER_TAG="$CI_COMMIT_REF_NAME"

            echo "STACK: $STACK_NAME"
            echo "NORMALIZED_STACK_NAME: $NORMALIZED_STACK_NAME"
            echo "CI_ENVIRONMENT_SLUG: $CI_ENVIRONMENT_SLUG"
            echo "DOCKER_TAG: $DOCKER_TAG"

            echo "Genererar docker-compose-fil..."
            envsubst < docker-compose.yml > deployable-compose.yml
            cat deployable-compose.yml

            echo "Hämtar endpoint och swarm info..."
            export ENDPOINT_ID=$(curl -sSL \
              -H "Authorization: Bearer $PORTAINER_TOKEN" \
              https://portainer.cc25.chasacademy.dev/api/endpoints \
              | jq -r '.[] | select(.Name == "primary") | .Id')

            export SWARM_ID=$(curl -sSL \
              -H "Authorization: Bearer $PORTAINER_TOKEN" \
              https://portainer.cc25.chasacademy.dev/api/endpoints \
              | jq -r '.[] | select(.Name == "primary") | .Snapshots[0].DockerSnapshotRaw.Info.Swarm.Cluster.ID')

            echo "Kollar om stack redan finns..."
            STACK_ID=$(curl -sSL \
              -H "Authorization: Bearer $PORTAINER_TOKEN" \
              https://portainer.cc25.chasacademy.dev/api/stacks \
              | jq -r --arg NAME "$NORMALIZED_STACK_NAME" '.[] | select(.Name == $NAME) | .Id')

            if [ -z "$STACK_ID" ]; then
              echo "Skapar ny stack '$NORMALIZED_STACK_NAME'..."
              response_code=$(curl -s -o /tmp/response.json -w "%{http_code}" \
                -X POST \
                "https://portainer.cc25.chasacademy.dev/api/stacks/create/swarm/file?endpointId=$ENDPOINT_ID" \
                -H "Authorization: Bearer $PORTAINER_TOKEN" \
                -F Name="$NORMALIZED_STACK_NAME" \
                -F SwarmID="$SWARM_ID" \
                -F file=@deployable-compose.yml)

              if [ "$response_code" -ge 400 ]; then
                echo "ERROR: Kunde inte skapa stack (HTTP $response_code)"
                cat /tmp/response.json
                exit 1
              fi

              echo "Stack skapad."
              cat /tmp/response.json
            else
              echo "Uppdaterar befintlig stack '$NORMALIZED_STACK_NAME'..."
              COMPOSE_CONTENTS=$(cat deployable-compose.yml)
              JSON_PAYLOAD=$(jq -n --arg compose "$COMPOSE_CONTENTS" \
                '{"prune": true, "pullImage": true, "stackFileContent": $compose}')

              response_code=$(curl -s -o /tmp/update-response.json -w "%{http_code}" \
                -X PUT \
                "https://portainer.cc25.chasacademy.dev/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID" \
                -H "Authorization: Bearer $PORTAINER_TOKEN" \
                --json "$JSON_PAYLOAD")

              if [ "$response_code" -ge 400 ]; then
                echo "ERROR: Kunde inte uppdatera stack (HTTP $response_code)"
                cat /tmp/update-response.json
                exit 1
              fi

              echo "Stack uppdaterad."
              cat /tmp/update-response.json
            fi

#############################################
# 4) Deploy-job for main (production)
#############################################
deploy_main:
    stage: deploy
    image: "$CI_REGISTRY_IMAGE/utils:latest"

    environment:
        name: "production"
        url: "https://vibedrop-frontend.cc25.chasacademy.dev"

    rules:
        - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

    script:
        - |
            set -euo pipefail

            echo "Loggar in i Portainer..."
            export PORTAINER_TOKEN=$(curl -s -X POST "https://portainer.cc25.chasacademy.dev/api/auth" \
              --json '{"username": "'$PORTAINER_USER'", "password": "'$PORTAINER_PASSWORD'"}' \
              | jq -r '.jwt')

            echo "Bygger stack-namn..."
            export STACK_NAME="$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME"
            export NORMALIZED_STACK_NAME=$(echo "$STACK_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]_-')
            export SERVICE_NAME="frontend"
            export FULL_SERVICE_NAME="${NORMALIZED_STACK_NAME}_${SERVICE_NAME}"

            if [ ${#FULL_SERVICE_NAME} -gt 63 ]; then
              echo "ERROR: Tjänstnamn '$FULL_SERVICE_NAME' är ${#FULL_SERVICE_NAME} tecken långt. Max är 63."
              exit 1
            fi

            export CI_ENVIRONMENT_SLUG="vibedrop-frontend"
            export DOCKER_TAG="latest"

            echo "STACK: $STACK_NAME"
            echo "NORMALIZED_STACK_NAME: $NORMALIZED_STACK_NAME"
            echo "CI_ENVIRONMENT_SLUG: $CI_ENVIRONMENT_SLUG"
            echo "DOCKER_TAG: $DOCKER_TAG"

            echo "Genererar docker-compose-fil..."
            envsubst < docker-compose.yml > deployable-compose.yml
            cat deployable-compose.yml

            echo "Hämtar endpoint och swarm info..."
            export ENDPOINT_ID=$(curl -sSL \
              -H "Authorization: Bearer $PORTAINER_TOKEN" \
              https://portainer.cc25.chasacademy.dev/api/endpoints \
              | jq -r '.[] | select(.Name == "primary") | .Id')

            export SWARM_ID=$(curl -sSL \
              -H "Authorization: Bearer $PORTAINER_TOKEN" \
              https://portainer.cc25.chasacademy.dev/api/endpoints \
              | jq -r '.[] | select(.Name == "primary") | .Snapshots[0].DockerSnapshotRaw.Info.Swarm.Cluster.ID')

            echo "Kollar om stack redan finns..."
            STACK_ID=$(curl -sSL \
              -H "Authorization: Bearer $PORTAINER_TOKEN" \
              https://portainer.cc25.chasacademy.dev/api/stacks \
              | jq -r --arg NAME "$NORMALIZED_STACK_NAME" '.[] | select(.Name == $NAME) | .Id')

            if [ -z "$STACK_ID" ]; then
              echo "Skapar ny stack '$NORMALIZED_STACK_NAME'..."
              response_code=$(curl -s -o /tmp/response.json -w "%{http_code}" \
                -X POST \
                "https://portainer.cc25.chasacademy.dev/api/stacks/create/swarm/file?endpointId=$ENDPOINT_ID" \
                -H "Authorization: Bearer $PORTAINER_TOKEN" \
                -F Name="$NORMALIZED_STACK_NAME" \
                -F SwarmID="$SWARM_ID" \
                -F file=@deployable-compose.yml)

              if [ "$response_code" -ge 400 ]; then
                echo "ERROR: Kunde inte skapa stack (HTTP $response_code)"
                cat /tmp/response.json
                exit 1
              fi

              echo "Stack skapad."
              cat /tmp/response.json
            else
              echo "Uppdaterar befintlig stack '$NORMALIZED_STACK_NAME'..."
              COMPOSE_CONTENTS=$(cat deployable-compose.yml)
              JSON_PAYLOAD=$(jq -n --arg compose "$COMPOSE_CONTENTS" \
                '{"prune": true, "pullImage": true, "stackFileContent": $compose}')

              response_code=$(curl -s -o /tmp/update-response.json -w "%{http_code}" \
                -X PUT \
                "https://portainer.cc25.chasacademy.dev/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID" \
                -H "Authorization: Bearer $PORTAINER_TOKEN" \
                --json "$JSON_PAYLOAD")

              if [ "$response_code" -ge 400 ]; then
                echo "❌ ERROR: Kunde inte uppdatera stack (HTTP $response_code)"
                cat /tmp/update-response.json
                exit 1
              fi

              echo "✅ Stack uppdaterad."
              cat /tmp/update-response.json
            fi

#############################################
# 5) Teardown-job to stop review
#############################################
stop_review:
    stage: teardown
    image: "$CI_REGISTRY_IMAGE/utils:latest"
    environment:
        name: "review-$CI_COMMIT_REF_NAME"
        action: stop
    rules:
        # Kör manuellt via GitLab UI
        - if: $CI_MERGE_REQUEST_ID
          when: manual

        # Kör automatiskt när MR stängs eller mergas
        - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_STATE == "merged"'
          when: always
        - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_STATE == "closed"'
          when: always
    script:
        - |
            set -e

            export PORTAINER_TOKEN=$(curl -X POST "https://portainer.cc25.chasacademy.dev/api/auth" \
              --json '{"username": "'$PORTAINER_USER'", "password": "'$PORTAINER_PASSWORD'"}' \
              | jq -r '.jwt')

            export STACK_NAME=$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME
            echo "STACK: $STACK_NAME"

            export ENDPOINT_ID=$(curl -sSL \
              -H "Authorization: Bearer $PORTAINER_TOKEN" \
              https://portainer.cc25.chasacademy.dev/api/endpoints \
              | jq -r '.[] | select(.Name == "primary") | .Id')

            echo "Endpoint: $ENDPOINT_ID"

            NORMALIZED_STACK_NAME=$(echo "$STACK_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]_-')

            echo "Checking if stack $NORMALIZED_STACK_NAME is present..."
            STACK_ID=$(curl -sSL \
              -H "Authorization: Bearer $PORTAINER_TOKEN" \
              https://portainer.cc25.chasacademy.dev/api/stacks \
              | jq -r --arg NAME "$NORMALIZED_STACK_NAME" '.[] | select(.Name == $NAME) | .Id')

            echo "Stack id: \"$STACK_ID\""

            if [ -z "$STACK_ID" ]
            then
              echo "Stack $STACK_ID $STACK_NAME not found!"
              exit 1

            else 
              echo "Deleting stack $STACK_ID ($STACK_NAME)"
              response=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
                "https://portainer.cc25.chasacademy.dev/api/stacks/$STACK_ID?endpointId=$ENDPOINT_ID" \
                -H "Authorization: Bearer $PORTAINER_TOKEN")

              if [ "$response" -eq 204 ]; then
                echo "Stack $STACK_ID successfully deleted."
              else
                echo "Failed to delete stack $STACK_ID. HTTP status code: $response"
                exit 1
              fi
            fi
